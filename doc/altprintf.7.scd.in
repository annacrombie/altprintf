altprintf(7)

# NAME

altprintf - a powerful string template language

# SYNOPSIS

@GRAMMAR@

# DESCRIPTION

altprintf is a string template language.  It is intended to format strings for
display on a terminal or similar, but may be shoehorned into other
applications.

# FORMAT STRING SYNTAX

A document written in this template language is referred to as a format string,
template string, or just a template.  This string is composed of raw text and
*format elements*, denoted by {}.  Raw text remains unchanged in the output.

## FORMAT ELEMENT

A *format element* is always surrounded by an opening and closing curly brace
{}.  The interior takes two forms

- a basic expression
- a conditional expression

## BASIC EXPRESSION

The basic expression consists of an optional *name* or *literal*, and optional
*format options*.  A literal is denoted by the equals sign as the first
character.  This literal can contain both raw text and format elements.  The
only difference is that any : needs to be escaped.

Ex.

The simplest format element: {}++
An element with options: {:>08b}++
An element with an name: {test}++
An element with an name and options: {test:>08b}++
An element with a literal: {=Hello World!}++
An element with a literal and options: {=Hello World!:10}++
Nested elements: {=h{=e{=l{=l{=o}}}}}

## CONDITIONAL EXPRESSION

A conditional expression takes the form of an optional *name* followed by *?* and
two branches separated by *:*.

{[name]*?*true expression*:*false expression}

Note that a literal *name* is not allowed here, as it would be pointless (always
true).  The expressions are similar to literals above; they may contain raw
text and format elements.  If you do not need a false branch, you may omit it
as well as the *:* separator, e.g. {[name]*?*true expression}.

If you would like to apply format options to a conditional expression, wrap it
in a literal:

{={[name]*?*true expression*:*false expression}:> 25}

## FORMAT OPTIONS

*<* or *>*, followed by a *character* - *<* specifies left-align, *>* specifies
	right-align. The following *character* is used as a fill character

	default: left-align with spaces

\[*0-9*]+ - set the *field width*

	default: 0

*.*[*0-9*]\* - set the *precision*

	default: unset

*b* or *x* - specify a transformation to be applied to the argument.
	*b* represents the data as binary, and *x* as hexadecimal.

# NAMED ARGUMENTS

The way named arguments are handled is up to the library consumer.

# POSITIONAL ARGUMENTS

If a *format element* is specified without an *name*, it will be assigned a
positional id.  This id starts at 0 and increments as elements are encountered.
If a conditional with branches that take arguments is encountered, each branch
gets assigned the same positional ids.

```
                conditional
               /         \\
"{}, {ab}, {}, {?{}, {}:{}}, {}"
 |    |    |   | |   |  |    |
 0    |    1   2 |   |  |    5
      |          |   |  |
      |          3   4  |
      |           \\ /   3
      |         branch  |
      |               branch
 named argument counted

```

# NOTE ABOUT WIDTH

All widths refer to column widths.  For ascii, this is the same as the number
of characters in the string. e.g. the width of "hello" is 5.  However, many CJK
characters are double width, e.g. æ›– is two columns wide.  *altprintf* uses a
variant of *wcswidth*(3) to determine a characters width.

# MOTIVATION

Why create a template language when there is already *printf*(3) in the c
standard library?  There are many reasons.  For one, printf is not designed to
allow untrusted user input as it's format string.  Also, printf can not
properly align wide characters, nor does it support conditional printing, named
fields, and many other necessary features.

For example, consider you are making a command line music player.  You want to
allow your users to customize how the currently playing track is displayed.
With printf, the solution would be error prone, since you would have to parse
the format string anyway to determine how many arguments were necessary and to
do some validation so printf won't cause a segfault for instance.

# SEE ALSO

*altprintf*(1), *altprintf*(3)

# AUTHORS

Maintained by Stone Tickle <lattis@mochiro.moe>
