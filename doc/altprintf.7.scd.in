altprintf(7)

# NAME

altprintf - a string template language

# SYNOPSIS

@GRAMMAR@

# DESCRIPTION

altprintf is a string template language.

# FORMAT STRING SYNTAX

The basic syntax is similar in form to printf(3).  Ordinary characters are
copied unchanged to the output string.  When a opening curly brace ({) is
encountered, the contained *format element* is processed.

## FORMAT ELEMENT

A *format element* is always surrounded by an opening and closing curly brace
({, and }).  The interior takes two forms:

- a basic expression
- a conditional expression

## BASIC EXPRESSION

{[*name*|=*literal*][*:*[*opts*]]}

A basic expression consists of two parts seperated by a colon (:).  The left
hand side determines the source from which text will be formatted and output
while the right hand side contains *format options*.  Either side may be empty.

A source can take three forms:

- empty, in which case an implicit numerical id is generated
- any character except a non-escaped colon, which will be recorded as the
  format elements *name*
- an equals sign (=) followed by any character except a non-escaped colon, which
  will be processed as a *literal*

In the third form, the *format element* does not get data from arguments, but
instead uses the embedded *literal* as its source.  This *literal* is a
fully-fledged format string as well, and may have embedded *format elements*
which will be processed recursively.

Ex.

The simplest format element: {}++
An element with format options: {:>08b}++
An element with a name: {test}++
An element with a name and options: {test:>08b}++
An element with a literal: {=Hello World!}++
An element with a literal and options: {=Hello World!:10}++
Nested literals and elements: {=h{=e{=l{=l{=o}}}}}

## CONDITIONAL EXPRESSION

{[*name*]?*true expression*[:*false expression*]}

A conditional expression consists of two parts separated by a question mark
(?).  The left hand side is the source may be either empty or a *name* with the
same semantics described above in *basic expression*.  Note that a conditional
expression may not contain a *literal* as its source.  The right hand side part
of the conditional consists of two branches separated by *:*.

Ex.

The simplest conditional: {?}++
A conditional with a name: {test?}++
A conditional with a true branch: {?yes}++
A conditional with a false branch: {?:no}++
A conditional with both branches: {?yes:no}++
A conditional with format options {={test?yes:no}:> 25}

## FORMAT OPTIONS

*<* or *>*, followed by a *character* - control field alignment

	- *<* left-align
	- *>* right-align

	*character* is used as a fill character

	default: left-align with spaces

\[*0-9*]+ - set the *field width*

	default: 0

*.*[*0-9*]\* - set the *precision*

	default: unset

*b* or *x* - specify a transformation to be applied to the argument.
	*b* represents the data as binary, and *x* as hexadecimal.

# NAMED ARGUMENTS

The way named that arguments are handled is up to the library consumer.

# POSITIONAL ARGUMENTS

If a *format element* is specified without an *name*, it will be assigned a
positional id.  This id starts at 0 and increments as elements are encountered.
If a conditional with branches that take arguments is encountered, each branch
gets assigned the same positional ids.

```
                conditional
               /         \\
"{}, {ab}, {}, {?{}, {}:{}}, {}"
 |    |    |   | |   |  |    |
 0    |    1   2 |   |  |    5
      |          |   |  |
      |          3   4  |
      |           \\ /   3
      |         branch  |
      |               branch
 named argument counted

```

# NOTE ABOUT WIDTH

All widths refer to column widths.  For ascii, this is the same as the number
of characters in the string. e.g. the width of "hello" is 5.  However, many CJK
characters are double width, e.g. æ›– is two columns wide.  *altprintf* uses a
variant of *wcswidth*(3) to determine a characters width.

# MOTIVATION

*altprintf* was designed with a very specific goal in mind.  Allowing users to
customize a program's functionality through the use of format strings.  For
this you need some way to provide the user with set fields that they are free
to reorder.  You would also like the string to be saftey-checked so that bad
input won't crash your program.  Both of these things would be rather difficult
to do with *printf*, so many program authors create their own
application-specific format string language.

*altprintf* seeks to offer an alternative, which while more general than a
custom solution, offers many niceities such as conditional printnig,
wide-character alignment, nested elements, etc. that would get left
unimplemented in said custom solution.

# EXAMPLES

```
@EXAMPLES@
```

# SEE ALSO

*altprintf*(3)

# AUTHORS

Maintained by Stone Tickle <lattis@mochiro.moe>
