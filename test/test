#!/usr/bin/env python3

import subprocess
from apf_grammar import cfg
import sys
from fuzzer import Fuzzer, str_tree, print_tree

apf = sys.argv[1]


def apf_test(in_, out, *args):
    args = list(map(lambda x: str(x), args))
    in_ = in_.encode("utf-8")

    result = subprocess.run(
        [apf, in_, *args],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )

    if result.stderr is not None:
        try:
            stderr = result.stderr.decode("utf-8")
        except UnicodeDecodeError:
            stderr = result.stderr
    else:
        stderr = ""

    try:
        res = result.stdout.decode("utf-8")
    except UnicodeDecodeError:
        print(f"test failed: '{in_}'")
        print(f"garbled results: {result.stdout}")
        return False

    if out is None:
        if result.returncode != 0:
            print(f"test failed: '{in_}'")
            print(stderr)
            return False
    elif res != out:
        print(f"test failed: '{in_}'")
        print(stderr)
        print(f"got:      '{res}'")
        print(f"expected: '{out}'")

        return False

    return True


assert apf_test("test", "test")
assert apf_test("test {}", "test string", "string")
assert apf_test("{:.3}", "1.500", 1.5)
assert apf_test("{}", "80", 80)
assert apf_test("{=:>#10}", "##########")
assert apf_test("{?a:b}", "a", 1)
assert apf_test("{?a:b}", "b", 0)
assert apf_test("a{=b:> 9}", "a        b")
assert apf_test("片{}", "片仮名", "仮名")
assert apf_test("{?{={?a:b{}}}}d", "bcd", 1, 0, "c")
assert apf_test("片{:> 5}", "片 仮名", "仮名")
assert apf_test("{=片{:> 5}:> 8}", " 片 仮名", "仮名")

fuzzer = Fuzzer(cfg)
amnt = 1000
for x in range(amnt):
    if x % 1000 == 0:
        print("\r%3d%%, %d / %d" % (x * 100.0 / amnt, x, amnt))
    tree = fuzzer.gen()

    if not apf_test(str_tree(tree), None, *fuzzer.args()):
        print_tree(tree)
        sys.exit(1)
